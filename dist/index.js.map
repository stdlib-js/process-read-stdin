{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar Buffer = require( '@stdlib/buffer-ctor' );\nvar string2buffer = require( '@stdlib/buffer-from-string' );\nvar stream = require( '@stdlib/streams-node-stdin' );\nvar nextTick = require( '@stdlib/utils-next-tick' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Reads data from `stdin`.\n*\n* @param {(string|null)} [encoding] - string encoding. If set, data will be returned as an encoded `string`.\n* @param {Function} clbk - callback to be invoked upon reading all data from `stdin`\n* @throws {TypeError} `encoding` argument must be a string\n* @throws {TypeError} callback argument must be a function\n* @returns {void}\n*\n* @example\n* function onRead( error, data ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( data.toString() );\n*     // => '...'\n* }\n*\n* stdin( onRead );\n*\n* @example\n* function onRead( error, data ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( data );\n*     // => '...'\n* }\n*\n* stdin( 'utf8', onRead );\n*/\nfunction stdin() {\n\tvar clbk;\n\tvar data;\n\tvar enc;\n\tvar len;\n\n\tif ( arguments.length === 1 ) {\n\t\tclbk = arguments[ 0 ];\n\t} else {\n\t\tenc = arguments[ 0 ];\n\t\tif ( !isString( enc ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Encoding argument must be a string. Value: `%s`.', enc ) );\n\t\t}\n\t\tclbk = arguments[ 1 ];\n\t}\n\tif ( !isFunction( clbk ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', clbk ) );\n\t}\n\tif ( enc ) {\n\t\tstream.setEncoding( enc );\n\t}\n\t// If the calling file is being run as a script and not as part of a pipeline, we should not expect to receive anything on `stdin`.\n\tif ( stream.isTTY ) {\n\t\treturn nextTick( onTick );\n\t}\n\tdata = [];\n\tlen = 0;\n\n\tstream.on( 'readable', onReadable );\n\tstream.on( 'error', onError );\n\tstream.on( 'end', onEnd );\n\n\t/**\n\t* Callback invoked after the next tick.\n\t*\n\t* @private\n\t* @returns {void}\n\t*/\n\tfunction onTick() {\n\t\tif ( enc ) {\n\t\t\treturn clbk( null, '' );\n\t\t}\n\t\tclbk( null, string2buffer( '' ) );\n\t}\n\n\t/**\n\t* Callback invoked once the stream has data to consume.\n\t*\n\t* @private\n\t*/\n\tfunction onReadable() {\n\t\tvar chunk;\n\t\twhile ( true ) {\n\t\t\tchunk = stream.read();\n\t\t\tif ( chunk === null ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( typeof chunk === 'string' ) {\n\t\t\t\tchunk = string2buffer( chunk );\n\t\t\t}\n\t\t\tdata.push( chunk );\n\t\t\tlen += chunk.length;\n\t\t}\n\t}\n\n\t/**\n\t* Callback invoked upon encountering a stream error.\n\t*\n\t* @private\n\t* @param {Error} error - error object\n\t*/\n\tfunction onError( error ) {\n\t\tclbk( error );\n\t}\n\n\t/**\n\t* Callback invoked after all data has been consumed.\n\t*\n\t* @private\n\t* @returns {void}\n\t*/\n\tfunction onEnd() {\n\t\tif ( enc ) {\n\t\t\t// Return a string...\n\t\t\treturn clbk( null, data.join( '' ) );\n\t\t}\n\t\t// Return a buffer...\n\t\tclbk( null, Buffer.concat( data, len ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = stdin;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Read data from `stdin`.\n*\n* @module @stdlib/process-read-stdin\n*\n* @example\n* var stdin = require( '@stdlib/process-read-stdin' );\n*\n* function onRead( error, data ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( data.toString() );\n*     // returns '...'\n* }\n*\n* stdin( onRead );\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAa,QAAS,4BAA6B,EACnDC,EAAW,QAAS,0BAA2B,EAAE,YACjDC,EAAS,QAAS,qBAAsB,EACxCC,EAAgB,QAAS,4BAA6B,EACtDC,EAAS,QAAS,4BAA6B,EAC/CC,EAAW,QAAS,yBAA0B,EAC9CC,EAAS,QAAS,uBAAwB,EAoC9C,SAASC,GAAQ,CAChB,IAAIC,EACAC,EACAC,EACAC,EAEJ,GAAK,UAAU,SAAW,EACzBH,EAAO,UAAW,CAAE,MACd,CAEN,GADAE,EAAM,UAAW,CAAE,EACd,CAACT,EAAUS,CAAI,EACnB,MAAM,IAAI,UAAWJ,EAAQ,qEAAsEI,CAAI,CAAE,EAE1GF,EAAO,UAAW,CAAE,CACrB,CACA,GAAK,CAACR,EAAYQ,CAAK,EACtB,MAAM,IAAI,UAAWF,EAAQ,uEAAwEE,CAAK,CAAE,EAM7G,GAJKE,GACJN,EAAO,YAAaM,CAAI,EAGpBN,EAAO,MACX,OAAOC,EAAUO,CAAO,EAEzBH,EAAO,CAAC,EACRE,EAAM,EAENP,EAAO,GAAI,WAAYS,CAAW,EAClCT,EAAO,GAAI,QAASU,CAAQ,EAC5BV,EAAO,GAAI,MAAOW,CAAM,EAQxB,SAASH,GAAS,CACjB,GAAKF,EACJ,OAAOF,EAAM,KAAM,EAAG,EAEvBA,EAAM,KAAML,EAAe,EAAG,CAAE,CACjC,CAOA,SAASU,GAAa,CAErB,QADIG,EAEHA,EAAQZ,EAAO,KAAK,EACfY,IAAU,MAGV,OAAOA,GAAU,WACrBA,EAAQb,EAAea,CAAM,GAE9BP,EAAK,KAAMO,CAAM,EACjBL,GAAOK,EAAM,MAEf,CAQA,SAASF,EAASG,EAAQ,CACzBT,EAAMS,CAAM,CACb,CAQA,SAASF,GAAQ,CAChB,GAAKL,EAEJ,OAAOF,EAAM,KAAMC,EAAK,KAAM,EAAG,CAAE,EAGpCD,EAAM,KAAMN,EAAO,OAAQO,EAAME,CAAI,CAAE,CACxC,CACD,CAKAZ,EAAO,QAAUQ,ICrHjB,IAAIW,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isFunction", "isString", "Buffer", "string2buffer", "stream", "nextTick", "format", "stdin", "clbk", "data", "enc", "len", "onTick", "onReadable", "onError", "onEnd", "chunk", "error", "main"]
}
